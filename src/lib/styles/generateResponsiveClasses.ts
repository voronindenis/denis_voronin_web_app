import {
  BASE_CLASS_NAMES_SAFE_LIST,
  LG_CLASS_NAMES_SAFE_LIST,
  MD_CLASS_NAMES_SAFE_LIST,
  SM_CLASS_NAMES_SAFE_LIST,
  XL_CLASS_NAMES_SAFE_LIST,
  XS_CLASS_NAMES_SAFE_LIST,
  XXL_CLASS_NAMES_SAFE_LIST,
  XXS_CLASS_NAMES_SAFE_LIST,
  XXXL_CLASS_NAMES_SAFE_LIST,
  XXXS_CLASS_NAMES_SAFE_LIST,
  XXXXL_CLASS_NAMES_SAFE_LIST,
} from './constants';

type Breakpoint = 'base' | '3xs' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';
type PropertyValue = string | number;
type PropertyValues =
  | [
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
    ]
  | [
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
    ]
  | [
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
    ]
  | [
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
      PropertyValue,
    ]
  | [PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue]
  | [PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue]
  | [PropertyValue, PropertyValue, PropertyValue, PropertyValue, PropertyValue]
  | [PropertyValue, PropertyValue, PropertyValue, PropertyValue]
  | [PropertyValue, PropertyValue, PropertyValue]
  | [PropertyValue, PropertyValue]
  | [PropertyValue];

const breakpoints: Breakpoint[] = ['base', '3xs', '2xs', 'xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl'];

const CLASS_NAMES_SAFE_LIST = new Set([
  ...BASE_CLASS_NAMES_SAFE_LIST,
  ...SM_CLASS_NAMES_SAFE_LIST,
  ...MD_CLASS_NAMES_SAFE_LIST,
  ...LG_CLASS_NAMES_SAFE_LIST,
  ...XL_CLASS_NAMES_SAFE_LIST,
  ...XXL_CLASS_NAMES_SAFE_LIST,
  ...XXXL_CLASS_NAMES_SAFE_LIST,
  ...XXXXL_CLASS_NAMES_SAFE_LIST,
  ...XS_CLASS_NAMES_SAFE_LIST,
  ...XXS_CLASS_NAMES_SAFE_LIST,
  ...XXXS_CLASS_NAMES_SAFE_LIST,
]);

export const generateResponsiveClasses = (prefix: string, values: PropertyValues): string =>
  values
    .map((value, index) => {
      const bp = breakpoints[index];
      const cls = `${prefix}${value}`;
      const fullClassName = bp === 'base' ? cls : `${bp}:${cls}`;
      if (!CLASS_NAMES_SAFE_LIST.has(fullClassName)) {
        console.warn(`Class name "${fullClassName}" is not in the safe list. It may not be generated by Tailwind CSS.`);
      } else {
        return fullClassName;
      }
    })
    .join(' ');
